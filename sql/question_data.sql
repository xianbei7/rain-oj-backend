insert into question (title, content, tags, answer, submit_num, accepted_num, judge_case, judge_config, thumb_num,
                      favour_num, user_id, create_time, update_time, is_delete)
values ('两数之和',
        '给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出 和为目标值 target 的那两个整数，并返回它们的数组下标。你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。你可以按任意顺序返回答案。',
        '["简单", "数组", "哈希表"]', '[[0, 1]]', 1000, 800,
        '[{"input": [1, 2], "output": [3, 4]}, {"input": [6666, 7777], "output": [8888, 9999]}]',
        '{"timeLimit":9999,"memoryLimit":9999,"stackLimit":9999}', 500, 300, 12345678, '2023-01-01 12:00:00',
        '2023-01-01 12:00:00', 0),
       ('反转链表', '反转一个单链表。', '["简单", "链表"]', 'null', 1500, 1200,
        '[{"input": [1, 2, 3, 4, 5], "output": [5, 4, 3, 2, 1]}, {"input": [1, 2], "output": [2, 1]}, {"input": [1], "output": [1]}]',
        '{"timeLimit":9999,"memoryLimit":9999,"stackLimit":9999}', 1800, 1500, 98765432, '2023-01-02 13:30:00',
        '2023-01-02 13:30:00', 0),
       ('二叉树的最大深度', '给定一个二叉树，找出其最大深度。', '["简单", "树", "深度优先搜索"]', 'null', 1200, 1000,
        '[{"input": [3, 9, 20, null, null, 15, 7], "output": 3}, {"input": [1, null, 2], "output": 2}]',
        '{"timeLimit":9999,"memoryLimit":9999,"stackLimit":9999}', 2000, 1800, 55556666, '2023-01-03 15:45:00',
        '2023-01-03 15:45:00', 0),
       ('有效的括号', '给定一个只包括 "(", ")", "{", "}", "[", "]" 的字符串 s ，判断字符串是否有效。',
        '["简单", "栈", "字符串"]', 'null', 800, 600,
        '[{"input": "()","output": true}, {"input": "()[]{}","output": true}, {"input": "(]","output": false}]',
        '{"timeLimit":9999,"memoryLimit":9999,"stackLimit":9999}', 900, 700, 11112222, '2023-01-04 17:20:00',
        '2023-01-04 17:20:00', 0),
       ('合并两个有序数组',
        '给你两个有序整数数组 nums1 和 nums2 ，请你将 nums2 合并到 nums1 中，使 nums1 成为一个有序数组。',
        '["简单", "数组", "双指针"]', 'null', 1100, 900,
        '[{"input": [1, 2, 3, 0, 0, 0], "m": 3, "nums2": [2, 5, 6], "n": 3, "output": [1, 2, 2, 3, 5, 6]}, {"input": [1], "m": 1, "nums2": [], "n": 0, "output": [1]}]',
        '{"timeLimit":9999,"memoryLimit":9999,"stackLimit":9999}', 1200, 1000, 99998888, '2023-01-05 19:10:00',
        '2023-01-05 19:10:00', 0),
       ('设计循环队列', '设计一个循环队列，可以实现循环操作。', '["中等", "设计", "队列"]', 'null', 700, 500,
        '[{"input": ["MyCircularQueue", "enQueue", "enQueue", "enQueue", "deQueue", "enQueue", "deQueue", "enQueue", "enQueue", "enQueue", "enQueue"], "args": [[3], [1], [2], [3], [], [4], [], [2], [3], [4], [5]], "output": [true, true, true, true, true, true, true, true, true, true, true]}]',
        '{"timeLimit":9999,"memoryLimit":9999,"stackLimit":9999}', 800, 600, 77779999, '2023-01-06 21:05:00',
        '2023-01-06 21:05:00', 0),
       ('最长公共前缀', '编写一个函数来查找字符串数组中的最长公共前缀。', '["简单", "字符串"]', 'null', 1300, 1000,
        '[{"input": ["flower", "flow", "flight"], "output": "fl"}, {"input": ["dog", "racecar", "car"], "output": ""}]',
        '{"timeLimit":9999,"memoryLimit":9999,"stackLimit":9999}', 1500, 1200, 33334444, '2023-01-07 23:40:00',
        '2023-01-07 23:40:00', 0),
       ('LRU缓存机制', '设计和实现一个 LRU (最近最少使用) 缓存机制。', '["中等", "设计", "哈希表", "链表"]', 'null', 900,
        700,
        '[{"input": ["LRUCache", "put", "get", "put", "get", "get"], "args": [[2], [1, 1], [1], [2, 2], [1], [2]], "output": [null, null, 1, null, -1, 2]}]',
        '{"timeLimit":9999,"memoryLimit":9999,"stackLimit":9999}', 1000, 800, 44445555, '2023-01-08 01:25:00',
        '2023-01-08 01:25:00', 0),
       ('盛最多水的容器', '给你 n 个非负整数 a1，a2，...，an，每个数代表坐标中的一个点 (i, ai) 。',
        '["中等", "数组", "双指针"]', 'null', 700, 500,
        '[{"input": [1, 8, 6, 2, 5, 4, 8, 3, 7], "output": 49}, {"input": [1, 1], "output": 1}, {"input": [4, 3, 2, 1, 4], "output": 16}]',
        '{"timeLimit":9999,"memoryLimit":9999,"stackLimit":9999}', 800, 600, 66667777, '2023-01-09 03:15:00',
        '2023-01-09 03:15:00', 0),
       ('三数之和', '给你一个包含 n 个整数的数组 nums，判断 nums 中是否存在三个元素 a，b，c ，使得 a + b + c = 0 ？',
        '["中等", "数组", "双指针"]', 'null', 1200, 900,
        '[{"input": [-1, 0, 1, 2, -1, -4], "output": [[-1, -1, 2], [-1, 0, 1]]}, {"input": [], "output": []}, {"input": [0], "output": []}]',
        '{"timeLimit":9999,"memoryLimit":9999,"stackLimit":9999}', 1300, 1000, 88889999, '2023-01-10 05:30:00',
        '2023-01-10 05:30:00', 0),
       ('四数之和',
        '给你一个由 n 个整数组成的数组 nums ，和一个目标值 target。你需要找到满足下面条件的四元组 (a, b, c, d)：',
        '["中等", "数组", "哈希表", "双指针"]', 'null', 800, 600,
        '[{"input": [1, 0, -1, 0, -2, 2], "target": 0, "output": [[-2, -1, 1, 2], [-2, 0, 0, 2], [-1, 0, 0, 1]]}, {"input": [], "target": 0, "output": []}, {"input": [0, 0, 0, 0], "target": 0, "output": [[0, 0, 0, 0]]}]',
        '{"timeLimit":9999,"memoryLimit":9999,"stackLimit":9999}', 900, 700, 55554444, '2023-01-11 07:45:00',
        '2023-01-11 07:45:00', 0),
       ('最接近的三数之和',
        '给定一个包括 n 个整数的数组 nums 和 一个目标值 target。找出 nums 中的三个整数，使得它们的和与 target 最接近。',
        '["中等", "数组", "双指针"]', 'null', 1000, 800,
        '[{"input": [-1, 2, 1, -4], "target": 1, "output": 2}, {"input": [0, 0, 0], "target": 1, "output": 0}, {"input": [1, 1, 1, 0], "target": -100, "output": 2}]',
        '{"timeLimit":9999,"memoryLimit":9999,"stackLimit":9999}', 1100, 900, 22221111, '2023-01-12 10:00:00',
        '2023-01-12 10:00:00', 0),
       ('删除排序数组中的重复项',
        '给定一个排序数组，你需要在原地删除重复出现的元素，使得每个元素只出现一次，返回移除后数组的新长度。',
        '["简单", "数组", "双指针"]', 'null', 1500, 1200,
        '[{"input": [1, 1, 2], "output": [1, 2]}, {"input": [0, 0, 1, 1, 1, 2, 2, 3, 3, 4], "output": [0, 1, 2, 3, 4]}, {"input": [1, 1], "output": [1]}]',
        '{"timeLimit":9999,"memoryLimit":9999,"stackLimit":9999}', 1600, 1400, 33332222, '2023-01-13 12:15:00',
        '2023-01-13 12:15:00', 0),
       ('旋转图像', '给定一个 n × n 的二维矩阵表示一个图像。', '["中等", "数组"]', 'null', 1200, 1000,
        '[{"input": [[1, 2, 3], [4, 5, 6], [7, 8, 9]], "output": [[7, 4, 1], [8, 5, 2], [9, 6, 3]]}, {"input": [[5, 1, 9, 11], [2, 4, 8, 10], [13, 3, 6, 7], [15, 14, 12, 16]], "output": [[15, 13, 2, 5], [14, 3, 4, 1], [12, 6, 8, 9], [16, 7, 10, 11]]}]',
        '{"timeLimit":9999,"memoryLimit":9999,"stackLimit":9999}', 1300, 1100, 99992222, '2023-01-14 14:30:00',
        '2023-01-14 14:30:00', 0);